#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Instala√ß√£o das Melhorias do Sistema ADM-P6
Instala depend√™ncias e executa migra√ß√µes automaticamente
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Executa comando e trata erros"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Conclu√≠do")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erro: {e}")
        if e.stdout:
            print(f"Output: {e.stdout}")
        if e.stderr:
            print(f"Error: {e.stderr}")
        return False

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} detectado")
    return True

def install_dependencies():
    """Instala depend√™ncias do requirements.txt"""
    if not os.path.exists('requirements.txt'):
        print("‚ùå Arquivo requirements.txt n√£o encontrado")
        return False
    
    # Atualizar pip primeiro
    if not run_command(f"{sys.executable} -m pip install --upgrade pip", 
                      "Atualizando pip"):
        return False
    
    # Instalar depend√™ncias
    if not run_command(f"{sys.executable} -m pip install -r requirements.txt", 
                      "Instalando depend√™ncias"):
        return False
    
    return True

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    directories = ['backups', 'logs', 'migrations']
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"üìÅ Diret√≥rio criado: {directory}")
    
    return True

def run_migrations():
    """Executa migra√ß√µes do banco de dados"""
    if not os.path.exists('migration_runner.py'):
        print("‚ö†Ô∏è  migration_runner.py n√£o encontrado - pulando migra√ß√µes")
        return True
    
    print("üîÑ Executando migra√ß√µes do banco de dados...")
    
    # Mostrar status primeiro
    run_command(f"{sys.executable} migration_runner.py --status", 
               "Verificando status das migra√ß√µes")
    
    # Executar migra√ß√µes automaticamente
    try:
        import sqlite3
        
        # Verificar se h√° migra√ß√µes pendentes
        from migration_runner import MigrationRunner
        runner = MigrationRunner()
        pending = runner.get_pending_migrations()
        
        if pending:
            print(f"üìã {len(pending)} migra√ß√µes pendentes encontradas")
            
            # Em modo autom√°tico, criar backup e executar
            runner.create_backup_before_migration()
            
            success_count = 0
            for migration in pending:
                if runner.execute_migration(migration):
                    success_count += 1
                else:
                    print(f"‚ùå Falha na migra√ß√£o: {migration.name}")
                    break
            
            if success_count == len(pending):
                print("‚úÖ Todas as migra√ß√µes executadas com sucesso")
                return True
            else:
                print("‚ö†Ô∏è  Algumas migra√ß√µes falharam")
                return False
        else:
            print("‚úÖ Nenhuma migra√ß√£o pendente")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao executar migra√ß√µes: {e}")
        return False

def verify_installation():
    """Verifica se a instala√ß√£o foi bem-sucedida"""
    print("\nüîç Verificando instala√ß√£o...")
    
    # Verificar depend√™ncias cr√≠ticas
    try:
        import bcrypt
        print("‚úÖ bcrypt instalado")
    except ImportError:
        print("‚ùå bcrypt n√£o encontrado")
        return False
    
    try:
        import schedule
        print("‚úÖ schedule instalado")
    except ImportError:
        print("‚ùå schedule n√£o encontrado")
        return False
    
    # Verificar banco de dados
    try:
        import sqlite3
        if os.path.exists('usuarios.db'):
            conn = sqlite3.connect('usuarios.db')
            cursor = conn.cursor()
            
            # Verificar tabelas principais
            cursor.execute("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name IN ('encarregados', 'operadores', 'processos_procedimentos')
            """)
            
            tables = cursor.fetchall()
            if len(tables) == 3:
                print("‚úÖ Banco de dados verificado")
            else:
                print(f"‚ö†Ô∏è  Apenas {len(tables)}/3 tabelas principais encontradas")
            
            conn.close()
        else:
            print("‚ö†Ô∏è  Banco de dados ser√° criado na primeira execu√ß√£o")
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar banco: {e}")
        return False
    
    return True

def main():
    """Fun√ß√£o principal de instala√ß√£o"""
    print("üöÄ INSTALA√á√ÉO DAS MELHORIAS DO SISTEMA ADM-P6")
    print("=" * 50)
    
    steps = [
        ("Verificando vers√£o do Python", check_python_version),
        ("Criando diret√≥rios necess√°rios", create_directories),
        ("Instalando depend√™ncias", install_dependencies),
        ("Executando migra√ß√µes do banco", run_migrations),
        ("Verificando instala√ß√£o", verify_installation)
    ]
    
    success_count = 0
    for description, function in steps:
        print(f"\nüìã {description}")
        print("-" * 30)
        
        if function():
            success_count += 1
        else:
            print(f"\nüí• Falha na etapa: {description}")
            break
    
    print(f"\nüìä RESULTADO DA INSTALA√á√ÉO")
    print("=" * 30)
    print(f"Etapas conclu√≠das: {success_count}/{len(steps)}")
    
    if success_count == len(steps):
        print("\nüéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("\nüìù Pr√≥ximos passos:")
        print("   1. Execute 'python main.py' para iniciar o sistema")
        print("   2. Configure backup autom√°tico com 'python backup_manager.py --schedule'")
        print("   3. Teste as novas funcionalidades de seguran√ßa")
        
        # Mostrar informa√ß√µes importantes
        print("\nüîê MELHORIAS IMPLEMENTADAS:")
        print("   ‚úÖ Hashing bcrypt para senhas")
        print("   ‚úÖ Foreign Keys para integridade")
        print("   ‚úÖ √çndices para performance")
        print("   ‚úÖ Tabelas de refer√™ncia")
        print("   ‚úÖ Sistema de auditoria")
        print("   ‚úÖ Backup autom√°tico")
        
    else:
        print("\n‚ùå INSTALA√á√ÉO INCOMPLETA")
        print("   Verifique os erros acima e execute novamente")
        print("   Para instala√ß√£o manual:")
        print("   1. pip install -r requirements.txt")
        print("   2. python migration_runner.py --run")
        
        return False
    
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚è∏Ô∏è  Instala√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        print(f"\nüí• Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
