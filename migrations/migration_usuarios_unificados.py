#!/usr/bin/env python3
"""
Migra√ß√£o: Unifica√ß√£o das tabelas de usu√°rios
Data: 2025-08-17
Descri√ß√£o: 
- Remove tabelas encarregados e operadores
- Cria nova tabela usuarios unificada
- Permite v√≠nculos m√∫ltiplos (encarregado e/ou operador)
- Campos din√¢micos baseados no tipo (Oficial/Pra√ßa)
"""

import sqlite3
import hashlib
import uuid
from datetime import datetime
import os
import sys

def hash_senha(senha):
    """Cria hash da senha"""
    return hashlib.sha256(senha.encode()).hexdigest()

def executar_migracao():
    """Executa a migra√ß√£o do banco de dados"""
    
    # Determinar caminho do banco
    if getattr(sys, 'frozen', False):
        app_data_dir = os.path.join(os.environ.get('APPDATA', '.'), 'SistemaLogin')
        db_path = os.path.join(app_data_dir, 'usuarios.db')
    else:
        db_path = 'usuarios.db'
    
    print(f"üìÅ Usando banco de dados: {db_path}")
    
    # Conectar ao banco
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        print("üîÑ Iniciando migra√ß√£o...")
        
        # 1. Criar backup das tabelas antigas (caso existam dados importantes)
        print("üìã Verificando tabelas existentes...")
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name IN ('encarregados', 'operadores')")
        tabelas_existentes = cursor.fetchall()
        
        if tabelas_existentes:
            print(f"‚ö†Ô∏è  Encontradas tabelas: {[t[0] for t in tabelas_existentes]}")
            print("üóëÔ∏è  Removendo dados antigos...")
            
            # Remover dados das tabelas antigas
            cursor.execute("DELETE FROM encarregados")
            cursor.execute("DELETE FROM operadores")
            print("‚úÖ Dados antigos removidos")
        
        # 2. Remover tabelas antigas (incluindo usuarios atual)
        print("üóëÔ∏è  Removendo tabelas antigas...")
        cursor.execute("DROP TABLE IF EXISTS encarregados")
        cursor.execute("DROP TABLE IF EXISTS operadores")
        cursor.execute("DROP TABLE IF EXISTS usuarios")  # Remover tabela usuarios atual tamb√©m
        print("‚úÖ Tabelas antigas removidas")
        
        # 3. Criar nova tabela usuarios unificada
        print("üèóÔ∏è  Criando nova tabela usuarios...")
        cursor.execute('''
            CREATE TABLE usuarios (
                id TEXT PRIMARY KEY,
                tipo_usuario TEXT NOT NULL CHECK (tipo_usuario IN ('Oficial', 'Pra√ßa')),
                posto_graduacao TEXT NOT NULL,
                nome TEXT NOT NULL,
                matricula TEXT UNIQUE NOT NULL,
                is_encarregado BOOLEAN DEFAULT 0,
                is_operador BOOLEAN DEFAULT 0,
                email TEXT UNIQUE,
                senha TEXT,
                perfil TEXT CHECK (perfil IN ('admin', 'comum') OR perfil IS NULL),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                ativo BOOLEAN DEFAULT 1
            )
        ''')
        print("‚úÖ Tabela usuarios criada com sucesso")
        
        # 4. Criar usu√°rio administrador padr√£o
        print("üë§ Criando usu√°rio administrador...")
        admin_id = str(uuid.uuid4())
        admin_senha_hash = hash_senha("123456")
        current_time = datetime.now().isoformat()
        
        cursor.execute('''
            INSERT INTO usuarios (
                id, tipo_usuario, posto_graduacao, nome, matricula,
                is_encarregado, is_operador, email, senha, perfil,
                created_at, updated_at, ativo
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            admin_id,
            'Oficial',
            'CEL PM',
            'Administrador',
            'ADMIN001',
            0,  # n√£o √© encarregado
            1,  # √© operador
            'admin@sistema.com',
            admin_senha_hash,
            'admin',
            current_time,
            current_time,
            1
        ))
        
        print("‚úÖ Usu√°rio administrador criado:")
        print("   üìß Email: admin@sistema.com")
        print("   üîë Senha: 123456")
        print("   üëî Tipo: Oficial - CEL PM")
        print("   üîó V√≠nculo: Operador Admin")
        
        # 5. Confirmar transa√ß√£o
        conn.commit()
        print("üíæ Migra√ß√£o conclu√≠da com sucesso!")
        
        # 6. Verificar resultado
        cursor.execute("SELECT COUNT(*) FROM usuarios")
        total_usuarios = cursor.fetchone()[0]
        print(f"üìä Total de usu√°rios na nova tabela: {total_usuarios}")
        
    except Exception as e:
        print(f"‚ùå Erro durante a migra√ß√£o: {e}")
        conn.rollback()
        raise
    
    finally:
        cursor.close()
        conn.close()

if __name__ == "__main__":
    print("üöÄ Iniciando migra√ß√£o de usu√°rios...")
    print("="*50)
    
    try:
        executar_migracao()
        print("="*50)
        print("‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
        print("üéØ Sistema pronto para usar a nova estrutura de usu√°rios")
        
    except Exception as e:
        print("="*50)
        print(f"‚ùå Falha na migra√ß√£o: {e}")
        sys.exit(1)
