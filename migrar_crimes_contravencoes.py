#!/usr/bin/env python3
"""
Migra√ß√£o para criar tabela de crimes e contraven√ß√µes
Data: 05/08/2025
"""

import sqlite3
import os
from datetime import datetime
import shutil

def criar_backup():
    """Criar backup do banco antes da migra√ß√£o"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_filename = f"pre_crimes_migration_backup_{timestamp}.db"
    backup_path = os.path.join("backups", backup_filename)
    
    # Criar diret√≥rio de backup se n√£o existir
    os.makedirs("backups", exist_ok=True)
    
    # Copiar o banco atual
    shutil.copy2("usuarios.db", backup_path)
    print(f"‚úÖ Backup criado: {backup_path}")
    return backup_path

def executar_migracao():
    """Executar a migra√ß√£o para criar a tabela crimes_contravencoes"""
    try:
        # Criar backup
        backup_path = criar_backup()
        
        # Conectar ao banco
        conn = sqlite3.connect('usuarios.db')
        cursor = conn.cursor()
        
        print("üìã Iniciando migra√ß√£o da tabela crimes_contravencoes...")
        
        # Criar tabela crimes_contravencoes
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS crimes_contravencoes (
                id TEXT PRIMARY KEY,
                tipo VARCHAR(20) NOT NULL CHECK (tipo IN ('Crime', 'Contraven√ß√£o Penal')),
                dispositivo_legal VARCHAR(100) NOT NULL,
                artigo VARCHAR(10) NOT NULL,
                descricao_artigo TEXT NOT NULL,
                paragrafo VARCHAR(10),
                inciso VARCHAR(10),
                alinea VARCHAR(10),
                ativo BOOLEAN NOT NULL DEFAULT 1,
                data_criacao DATETIME DEFAULT CURRENT_TIMESTAMP,
                data_atualizacao DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        print("‚úÖ Tabela crimes_contravencoes criada com sucesso")
        
        # Criar √≠ndices para melhor performance
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_crimes_tipo ON crimes_contravencoes(tipo)
        """)
        
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_crimes_dispositivo ON crimes_contravencoes(dispositivo_legal)
        """)
        
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_crimes_artigo ON crimes_contravencoes(artigo)
        """)
        
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_crimes_ativo ON crimes_contravencoes(ativo)
        """)
        
        print("‚úÖ √çndices criados com sucesso")
        
        # Verificar se a tabela foi criada corretamente
        cursor.execute("PRAGMA table_info(crimes_contravencoes)")
        colunas = cursor.fetchall()
        
        print("\\nüìä Estrutura da tabela crimes_contravencoes:")
        for coluna in colunas:
            print(f"  - {coluna[1]} {coluna[2]} {'(PK)' if coluna[5] else ''}")
        
        # Inserir alguns dados de exemplo
        print("\\nüìù Inserindo dados de exemplo...")
        
        import uuid
        dados_exemplo = [
            # Crimes do C√≥digo Penal
            (str(uuid.uuid4()), 'Crime', 'C√≥digo Penal', '121', 'Homic√≠dio simples - Matar algu√©m', None, None, None, 1),
            (str(uuid.uuid4()), 'Crime', 'C√≥digo Penal', '129', 'Les√£o corporal - Ofender a integridade corporal ou a sa√∫de de outrem', None, None, None, 1),
            (str(uuid.uuid4()), 'Crime', 'C√≥digo Penal', '155', 'Furto - Subtrair, para si ou para outrem, coisa alheia m√≥vel', None, None, None, 1),
            (str(uuid.uuid4()), 'Crime', 'C√≥digo Penal', '157', 'Roubo - Subtrair coisa m√≥vel alheia, para si ou para outrem, mediante grave amea√ßa ou viol√™ncia √† pessoa, ou depois de hav√™-la, por qualquer meio, reduzido √† impossibilidade de resist√™ncia', None, None, None, 1),
            (str(uuid.uuid4()), 'Crime', 'C√≥digo Penal', '213', 'Estupro - Constranger algu√©m, mediante viol√™ncia ou grave amea√ßa, a ter conjun√ß√£o carnal ou a praticar ou permitir que com ele se pratique outro ato libidinoso', None, None, None, 1),
            (str(uuid.uuid4()), 'Crime', 'C√≥digo Penal', '312', 'Peculato - Apropriar-se o funcion√°rio p√∫blico de dinheiro, valor ou qualquer outro bem m√≥vel, p√∫blico ou particular, de que tem a posse em raz√£o do cargo, ou desvi√°-lo, em proveito pr√≥prio ou alheio', None, None, None, 1),
            (str(uuid.uuid4()), 'Crime', 'C√≥digo Penal', '317', 'Corrup√ß√£o passiva - Solicitar ou receber, para si ou para outrem, direta ou indiretamente, ainda que fora da fun√ß√£o ou antes de assumi-la, mas em raz√£o dela, vantagem indevida, ou aceitar promessa de tal vantagem', None, None, None, 1),
            (str(uuid.uuid4()), 'Crime', 'C√≥digo Penal', '331', 'Desacato - Desacatar funcion√°rio p√∫blico no exerc√≠cio da fun√ß√£o ou em raz√£o dela', None, None, None, 1),
            (str(uuid.uuid4()), 'Crime', 'C√≥digo Penal', '329', 'Resist√™ncia - Opor-se √† execu√ß√£o de ato legal, mediante viol√™ncia ou amea√ßa a funcion√°rio competente para execut√°-lo ou a quem lhe esteja prestando aux√≠lio', None, None, None, 1),
            
            # Crimes do C√≥digo de Tr√¢nsito Brasileiro
            (str(uuid.uuid4()), 'Crime', 'C√≥digo de Tr√¢nsito Brasileiro', '302', 'Praticar homic√≠dio culposo na dire√ß√£o de ve√≠culo automotor', None, None, None, 1),
            (str(uuid.uuid4()), 'Crime', 'C√≥digo de Tr√¢nsito Brasileiro', '303', 'Praticar les√£o corporal culposa na dire√ß√£o de ve√≠culo automotor', None, None, None, 1),
            (str(uuid.uuid4()), 'Crime', 'C√≥digo de Tr√¢nsito Brasileiro', '306', 'Conduzir ve√≠culo automotor com capacidade psicomotora alterada em raz√£o da influ√™ncia de √°lcool ou de outra subst√¢ncia psicoativa que determine depend√™ncia', None, None, None, 1),
            (str(uuid.uuid4()), 'Crime', 'C√≥digo de Tr√¢nsito Brasileiro', '309', 'Dirigir ve√≠culo automotor, em via p√∫blica, sem a devida Permiss√£o para Dirigir ou Carteira de Habilita√ß√£o', None, None, None, 1),
            
            # Contraven√ß√µes Penais
            (str(uuid.uuid4()), 'Contraven√ß√£o Penal', 'Lei de Contraven√ß√µes Penais', '21', 'Vias de fato - Praticar vias de fato contra algu√©m', None, None, None, 1),
            (str(uuid.uuid4()), 'Contraven√ß√£o Penal', 'Lei de Contraven√ß√µes Penais', '47', 'Exerc√≠cio ilegal de profiss√£o ou atividade - Exercer profiss√£o ou atividade econ√¥mica ou anunciar que a exerce, sem preencher as condi√ß√µes a que por lei est√° subordinado o seu exerc√≠cio', None, None, None, 1),
            (str(uuid.uuid4()), 'Contraven√ß√£o Penal', 'Lei de Contraven√ß√µes Penais', '65', 'Perturba√ß√£o do trabalho ou do sossego alheios - Molestar algu√©m ou perturbar-lhe a tranquilidade, por acinte ou por motivo reprov√°vel', None, None, None, 1),
        ]
        
        cursor.executemany("""
            INSERT INTO crimes_contravencoes 
            (id, tipo, dispositivo_legal, artigo, descricao_artigo, paragrafo, inciso, alinea, ativo)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, dados_exemplo)
        
        # Confirmar as altera√ß√µes
        conn.commit()
        
        # Verificar quantos registros foram inseridos
        cursor.execute("SELECT COUNT(*) FROM crimes_contravencoes WHERE ativo = 1")
        total = cursor.fetchone()[0]
        print(f"‚úÖ {total} registros de exemplo inseridos")
        
        # Mostrar alguns registros inseridos
        cursor.execute("""
            SELECT tipo, dispositivo_legal, artigo, descricao_artigo 
            FROM crimes_contravencoes 
            WHERE ativo = 1 
            ORDER BY tipo, dispositivo_legal, artigo 
            LIMIT 5
        """)
        
        registros = cursor.fetchall()
        print("\\nüìã Primeiros registros inseridos:")
        for reg in registros:
            print(f"  - {reg[0]} | {reg[1]} | Art. {reg[2]} | {reg[3][:80]}...")
        
        conn.close()
        
        print("\\n‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
        print(f"üíæ Backup salvo em: {backup_path}")
        print("\\nüîó A tabela crimes_contravencoes est√° pronta para ser utilizada nos processos/procedimentos.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante a migra√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando migra√ß√£o para tabela de crimes e contraven√ß√µes...")
    sucesso = executar_migracao()
    
    if sucesso:
        print("\\n‚úÖ Migra√ß√£o executada com sucesso!")
    else:
        print("\\n‚ùå Migra√ß√£o falhou. Verifique os logs de erro acima.")
